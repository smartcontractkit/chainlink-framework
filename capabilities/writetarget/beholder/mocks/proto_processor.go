// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// ProtoProcessor is an autogenerated mock type for the ProtoProcessor type
type ProtoProcessor struct {
	mock.Mock
}

type ProtoProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *ProtoProcessor) EXPECT() *ProtoProcessor_Expecter {
	return &ProtoProcessor_Expecter{mock: &_m.Mock}
}

// Process provides a mock function with given fields: ctx, m, attrKVs
func (_m *ProtoProcessor) Process(ctx context.Context, m protoreflect.ProtoMessage, attrKVs ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, m)
	_ca = append(_ca, attrKVs...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, protoreflect.ProtoMessage, ...interface{}) error); ok {
		r0 = rf(ctx, m, attrKVs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProtoProcessor_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type ProtoProcessor_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - ctx context.Context
//   - m protoreflect.ProtoMessage
//   - attrKVs ...interface{}
func (_e *ProtoProcessor_Expecter) Process(ctx interface{}, m interface{}, attrKVs ...interface{}) *ProtoProcessor_Process_Call {
	return &ProtoProcessor_Process_Call{Call: _e.mock.On("Process",
		append([]interface{}{ctx, m}, attrKVs...)...)}
}

func (_c *ProtoProcessor_Process_Call) Run(run func(ctx context.Context, m protoreflect.ProtoMessage, attrKVs ...interface{})) *ProtoProcessor_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(protoreflect.ProtoMessage), variadicArgs...)
	})
	return _c
}

func (_c *ProtoProcessor_Process_Call) Return(_a0 error) *ProtoProcessor_Process_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProtoProcessor_Process_Call) RunAndReturn(run func(context.Context, protoreflect.ProtoMessage, ...interface{}) error) *ProtoProcessor_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewProtoProcessor creates a new instance of ProtoProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProtoProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProtoProcessor {
	mock := &ProtoProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
