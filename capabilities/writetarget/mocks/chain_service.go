// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-common/pkg/types"
)

// ChainService is an autogenerated mock type for the ChainService type
type ChainService struct {
	mock.Mock
}

type ChainService_Expecter struct {
	mock *mock.Mock
}

func (_m *ChainService) EXPECT() *ChainService_Expecter {
	return &ChainService_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *ChainService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChainService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ChainService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ChainService_Expecter) Close() *ChainService_Close_Call {
	return &ChainService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ChainService_Close_Call) Run(run func()) *ChainService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainService_Close_Call) Return(_a0 error) *ChainService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainService_Close_Call) RunAndReturn(run func() error) *ChainService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainStatus provides a mock function with given fields: ctx
func (_m *ChainService) GetChainStatus(ctx context.Context) (types.ChainStatus, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetChainStatus")
	}

	var r0 types.ChainStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.ChainStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.ChainStatus); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.ChainStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainService_GetChainStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainStatus'
type ChainService_GetChainStatus_Call struct {
	*mock.Call
}

// GetChainStatus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ChainService_Expecter) GetChainStatus(ctx interface{}) *ChainService_GetChainStatus_Call {
	return &ChainService_GetChainStatus_Call{Call: _e.mock.On("GetChainStatus", ctx)}
}

func (_c *ChainService_GetChainStatus_Call) Run(run func(ctx context.Context)) *ChainService_GetChainStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ChainService_GetChainStatus_Call) Return(_a0 types.ChainStatus, _a1 error) *ChainService_GetChainStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainService_GetChainStatus_Call) RunAndReturn(run func(context.Context) (types.ChainStatus, error)) *ChainService_GetChainStatus_Call {
	_c.Call.Return(run)
	return _c
}

// HealthReport provides a mock function with no fields
func (_m *ChainService) HealthReport() map[string]error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthReport")
	}

	var r0 map[string]error
	if rf, ok := ret.Get(0).(func() map[string]error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]error)
		}
	}

	return r0
}

// ChainService_HealthReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthReport'
type ChainService_HealthReport_Call struct {
	*mock.Call
}

// HealthReport is a helper method to define mock.On call
func (_e *ChainService_Expecter) HealthReport() *ChainService_HealthReport_Call {
	return &ChainService_HealthReport_Call{Call: _e.mock.On("HealthReport")}
}

func (_c *ChainService_HealthReport_Call) Run(run func()) *ChainService_HealthReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainService_HealthReport_Call) Return(_a0 map[string]error) *ChainService_HealthReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainService_HealthReport_Call) RunAndReturn(run func() map[string]error) *ChainService_HealthReport_Call {
	_c.Call.Return(run)
	return _c
}

// LatestHead provides a mock function with given fields: ctx
func (_m *ChainService) LatestHead(ctx context.Context) (types.Head, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LatestHead")
	}

	var r0 types.Head
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Head, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Head); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.Head)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainService_LatestHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestHead'
type ChainService_LatestHead_Call struct {
	*mock.Call
}

// LatestHead is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ChainService_Expecter) LatestHead(ctx interface{}) *ChainService_LatestHead_Call {
	return &ChainService_LatestHead_Call{Call: _e.mock.On("LatestHead", ctx)}
}

func (_c *ChainService_LatestHead_Call) Run(run func(ctx context.Context)) *ChainService_LatestHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ChainService_LatestHead_Call) Return(_a0 types.Head, _a1 error) *ChainService_LatestHead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainService_LatestHead_Call) RunAndReturn(run func(context.Context) (types.Head, error)) *ChainService_LatestHead_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodeStatuses provides a mock function with given fields: ctx, pageSize, pageToken
func (_m *ChainService) ListNodeStatuses(ctx context.Context, pageSize int32, pageToken string) ([]types.NodeStatus, string, int, error) {
	ret := _m.Called(ctx, pageSize, pageToken)

	if len(ret) == 0 {
		panic("no return value specified for ListNodeStatuses")
	}

	var r0 []types.NodeStatus
	var r1 string
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) ([]types.NodeStatus, string, int, error)); ok {
		return rf(ctx, pageSize, pageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string) []types.NodeStatus); ok {
		r0 = rf(ctx, pageSize, pageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.NodeStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string) string); ok {
		r1 = rf(ctx, pageSize, pageToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int32, string) int); ok {
		r2 = rf(ctx, pageSize, pageToken)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, int32, string) error); ok {
		r3 = rf(ctx, pageSize, pageToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ChainService_ListNodeStatuses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodeStatuses'
type ChainService_ListNodeStatuses_Call struct {
	*mock.Call
}

// ListNodeStatuses is a helper method to define mock.On call
//   - ctx context.Context
//   - pageSize int32
//   - pageToken string
func (_e *ChainService_Expecter) ListNodeStatuses(ctx interface{}, pageSize interface{}, pageToken interface{}) *ChainService_ListNodeStatuses_Call {
	return &ChainService_ListNodeStatuses_Call{Call: _e.mock.On("ListNodeStatuses", ctx, pageSize, pageToken)}
}

func (_c *ChainService_ListNodeStatuses_Call) Run(run func(ctx context.Context, pageSize int32, pageToken string)) *ChainService_ListNodeStatuses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(string))
	})
	return _c
}

func (_c *ChainService_ListNodeStatuses_Call) Return(stats []types.NodeStatus, nextPageToken string, total int, err error) *ChainService_ListNodeStatuses_Call {
	_c.Call.Return(stats, nextPageToken, total, err)
	return _c
}

func (_c *ChainService_ListNodeStatuses_Call) RunAndReturn(run func(context.Context, int32, string) ([]types.NodeStatus, string, int, error)) *ChainService_ListNodeStatuses_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *ChainService) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ChainService_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ChainService_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ChainService_Expecter) Name() *ChainService_Name_Call {
	return &ChainService_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ChainService_Name_Call) Run(run func()) *ChainService_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainService_Name_Call) Return(_a0 string) *ChainService_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainService_Name_Call) RunAndReturn(run func() string) *ChainService_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with no fields
func (_m *ChainService) Ready() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChainService_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type ChainService_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *ChainService_Expecter) Ready() *ChainService_Ready_Call {
	return &ChainService_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *ChainService_Ready_Call) Run(run func()) *ChainService_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChainService_Ready_Call) Return(_a0 error) *ChainService_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainService_Ready_Call) RunAndReturn(run func() error) *ChainService_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Replay provides a mock function with given fields: ctx, fromBlock, args
func (_m *ChainService) Replay(ctx context.Context, fromBlock string, args map[string]interface{}) error {
	ret := _m.Called(ctx, fromBlock, args)

	if len(ret) == 0 {
		panic("no return value specified for Replay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, fromBlock, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChainService_Replay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Replay'
type ChainService_Replay_Call struct {
	*mock.Call
}

// Replay is a helper method to define mock.On call
//   - ctx context.Context
//   - fromBlock string
//   - args map[string]interface{}
func (_e *ChainService_Expecter) Replay(ctx interface{}, fromBlock interface{}, args interface{}) *ChainService_Replay_Call {
	return &ChainService_Replay_Call{Call: _e.mock.On("Replay", ctx, fromBlock, args)}
}

func (_c *ChainService_Replay_Call) Run(run func(ctx context.Context, fromBlock string, args map[string]interface{})) *ChainService_Replay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *ChainService_Replay_Call) Return(_a0 error) *ChainService_Replay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainService_Replay_Call) RunAndReturn(run func(context.Context, string, map[string]interface{}) error) *ChainService_Replay_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *ChainService) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChainService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ChainService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *ChainService_Expecter) Start(_a0 interface{}) *ChainService_Start_Call {
	return &ChainService_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *ChainService_Start_Call) Run(run func(_a0 context.Context)) *ChainService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ChainService_Start_Call) Return(_a0 error) *ChainService_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainService_Start_Call) RunAndReturn(run func(context.Context) error) *ChainService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Transact provides a mock function with given fields: ctx, from, to, amount, balanceCheck
func (_m *ChainService) Transact(ctx context.Context, from string, to string, amount *big.Int, balanceCheck bool) error {
	ret := _m.Called(ctx, from, to, amount, balanceCheck)

	if len(ret) == 0 {
		panic("no return value specified for Transact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *big.Int, bool) error); ok {
		r0 = rf(ctx, from, to, amount, balanceCheck)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChainService_Transact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transact'
type ChainService_Transact_Call struct {
	*mock.Call
}

// Transact is a helper method to define mock.On call
//   - ctx context.Context
//   - from string
//   - to string
//   - amount *big.Int
//   - balanceCheck bool
func (_e *ChainService_Expecter) Transact(ctx interface{}, from interface{}, to interface{}, amount interface{}, balanceCheck interface{}) *ChainService_Transact_Call {
	return &ChainService_Transact_Call{Call: _e.mock.On("Transact", ctx, from, to, amount, balanceCheck)}
}

func (_c *ChainService_Transact_Call) Run(run func(ctx context.Context, from string, to string, amount *big.Int, balanceCheck bool)) *ChainService_Transact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*big.Int), args[4].(bool))
	})
	return _c
}

func (_c *ChainService_Transact_Call) Return(_a0 error) *ChainService_Transact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChainService_Transact_Call) RunAndReturn(run func(context.Context, string, string, *big.Int, bool) error) *ChainService_Transact_Call {
	_c.Call.Return(run)
	return _c
}

// NewChainService creates a new instance of ChainService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainService {
	mock := &ChainService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
