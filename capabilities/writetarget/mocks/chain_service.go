// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/smartcontractkit/chainlink-common/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// ChainService is an autogenerated mock type for the chainService type
type ChainService struct {
	mock.Mock
}

type ChainService_Expecter struct {
	mock *mock.Mock
}

func (_m *ChainService) EXPECT() *ChainService_Expecter {
	return &ChainService_Expecter{mock: &_m.Mock}
}

// LatestHead provides a mock function with given fields: ctx
func (_m *ChainService) LatestHead(ctx context.Context) (types.Head, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LatestHead")
	}

	var r0 types.Head
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Head, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Head); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.Head)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainService_LatestHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestHead'
type ChainService_LatestHead_Call struct {
	*mock.Call
}

// LatestHead is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ChainService_Expecter) LatestHead(ctx interface{}) *ChainService_LatestHead_Call {
	return &ChainService_LatestHead_Call{Call: _e.mock.On("LatestHead", ctx)}
}

func (_c *ChainService_LatestHead_Call) Run(run func(ctx context.Context)) *ChainService_LatestHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ChainService_LatestHead_Call) Return(_a0 types.Head, _a1 error) *ChainService_LatestHead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainService_LatestHead_Call) RunAndReturn(run func(context.Context) (types.Head, error)) *ChainService_LatestHead_Call {
	_c.Call.Return(run)
	return _c
}

// NewChainService creates a new instance of ChainService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainService {
	mock := &ChainService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
