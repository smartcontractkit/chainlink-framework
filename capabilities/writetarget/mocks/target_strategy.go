// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	capabilities "github.com/smartcontractkit/chainlink-common/pkg/capabilities"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-common/pkg/types"

	writetarget "github.com/smartcontractkit/chainlink-framework/capabilities/writetarget"
)

// TargetStrategy is an autogenerated mock type for the TargetStrategy type
type TargetStrategy struct {
	mock.Mock
}

type TargetStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *TargetStrategy) EXPECT() *TargetStrategy_Expecter {
	return &TargetStrategy_Expecter{mock: &_m.Mock}
}

// GetEstimateFee provides a mock function with given fields: ctx, report, reportContext, signatures, request
func (_m *TargetStrategy) GetEstimateFee(ctx context.Context, report []byte, reportContext []byte, signatures [][]byte, request capabilities.CapabilityRequest) (types.EstimateFee, error) {
	ret := _m.Called(ctx, report, reportContext, signatures, request)

	if len(ret) == 0 {
		panic("no return value specified for GetEstimateFee")
	}

	var r0 types.EstimateFee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) (types.EstimateFee, error)); ok {
		return rf(ctx, report, reportContext, signatures, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) types.EstimateFee); ok {
		r0 = rf(ctx, report, reportContext, signatures, request)
	} else {
		r0 = ret.Get(0).(types.EstimateFee)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) error); ok {
		r1 = rf(ctx, report, reportContext, signatures, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetStrategy_GetEstimateFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEstimateFee'
type TargetStrategy_GetEstimateFee_Call struct {
	*mock.Call
}

// GetEstimateFee is a helper method to define mock.On call
//   - ctx context.Context
//   - report []byte
//   - reportContext []byte
//   - signatures [][]byte
//   - request capabilities.CapabilityRequest
func (_e *TargetStrategy_Expecter) GetEstimateFee(ctx interface{}, report interface{}, reportContext interface{}, signatures interface{}, request interface{}) *TargetStrategy_GetEstimateFee_Call {
	return &TargetStrategy_GetEstimateFee_Call{Call: _e.mock.On("GetEstimateFee", ctx, report, reportContext, signatures, request)}
}

func (_c *TargetStrategy_GetEstimateFee_Call) Run(run func(ctx context.Context, report []byte, reportContext []byte, signatures [][]byte, request capabilities.CapabilityRequest)) *TargetStrategy_GetEstimateFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte), args[3].([][]byte), args[4].(capabilities.CapabilityRequest))
	})
	return _c
}

func (_c *TargetStrategy_GetEstimateFee_Call) Return(_a0 types.EstimateFee, _a1 error) *TargetStrategy_GetEstimateFee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TargetStrategy_GetEstimateFee_Call) RunAndReturn(run func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) (types.EstimateFee, error)) *TargetStrategy_GetEstimateFee_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionFee provides a mock function with given fields: ctx, transactionID
func (_m *TargetStrategy) GetTransactionFee(ctx context.Context, transactionID string) (decimal.Decimal, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionFee")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (decimal.Decimal, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) decimal.Decimal); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetStrategy_GetTransactionFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionFee'
type TargetStrategy_GetTransactionFee_Call struct {
	*mock.Call
}

// GetTransactionFee is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID string
func (_e *TargetStrategy_Expecter) GetTransactionFee(ctx interface{}, transactionID interface{}) *TargetStrategy_GetTransactionFee_Call {
	return &TargetStrategy_GetTransactionFee_Call{Call: _e.mock.On("GetTransactionFee", ctx, transactionID)}
}

func (_c *TargetStrategy_GetTransactionFee_Call) Run(run func(ctx context.Context, transactionID string)) *TargetStrategy_GetTransactionFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TargetStrategy_GetTransactionFee_Call) Return(_a0 decimal.Decimal, _a1 error) *TargetStrategy_GetTransactionFee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TargetStrategy_GetTransactionFee_Call) RunAndReturn(run func(context.Context, string) (decimal.Decimal, error)) *TargetStrategy_GetTransactionFee_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionStatus provides a mock function with given fields: ctx, transactionID
func (_m *TargetStrategy) GetTransactionStatus(ctx context.Context, transactionID string) (types.TransactionStatus, error) {
	ret := _m.Called(ctx, transactionID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionStatus")
	}

	var r0 types.TransactionStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.TransactionStatus, error)); ok {
		return rf(ctx, transactionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.TransactionStatus); ok {
		r0 = rf(ctx, transactionID)
	} else {
		r0 = ret.Get(0).(types.TransactionStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetStrategy_GetTransactionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionStatus'
type TargetStrategy_GetTransactionStatus_Call struct {
	*mock.Call
}

// GetTransactionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - transactionID string
func (_e *TargetStrategy_Expecter) GetTransactionStatus(ctx interface{}, transactionID interface{}) *TargetStrategy_GetTransactionStatus_Call {
	return &TargetStrategy_GetTransactionStatus_Call{Call: _e.mock.On("GetTransactionStatus", ctx, transactionID)}
}

func (_c *TargetStrategy_GetTransactionStatus_Call) Run(run func(ctx context.Context, transactionID string)) *TargetStrategy_GetTransactionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TargetStrategy_GetTransactionStatus_Call) Return(_a0 types.TransactionStatus, _a1 error) *TargetStrategy_GetTransactionStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TargetStrategy_GetTransactionStatus_Call) RunAndReturn(run func(context.Context, string) (types.TransactionStatus, error)) *TargetStrategy_GetTransactionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// QueryTransmissionState provides a mock function with given fields: ctx, reportID, request
func (_m *TargetStrategy) QueryTransmissionState(ctx context.Context, reportID uint16, request capabilities.CapabilityRequest) (*writetarget.TransmissionState, error) {
	ret := _m.Called(ctx, reportID, request)

	if len(ret) == 0 {
		panic("no return value specified for QueryTransmissionState")
	}

	var r0 *writetarget.TransmissionState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint16, capabilities.CapabilityRequest) (*writetarget.TransmissionState, error)); ok {
		return rf(ctx, reportID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint16, capabilities.CapabilityRequest) *writetarget.TransmissionState); ok {
		r0 = rf(ctx, reportID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*writetarget.TransmissionState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint16, capabilities.CapabilityRequest) error); ok {
		r1 = rf(ctx, reportID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetStrategy_QueryTransmissionState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTransmissionState'
type TargetStrategy_QueryTransmissionState_Call struct {
	*mock.Call
}

// QueryTransmissionState is a helper method to define mock.On call
//   - ctx context.Context
//   - reportID uint16
//   - request capabilities.CapabilityRequest
func (_e *TargetStrategy_Expecter) QueryTransmissionState(ctx interface{}, reportID interface{}, request interface{}) *TargetStrategy_QueryTransmissionState_Call {
	return &TargetStrategy_QueryTransmissionState_Call{Call: _e.mock.On("QueryTransmissionState", ctx, reportID, request)}
}

func (_c *TargetStrategy_QueryTransmissionState_Call) Run(run func(ctx context.Context, reportID uint16, request capabilities.CapabilityRequest)) *TargetStrategy_QueryTransmissionState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint16), args[2].(capabilities.CapabilityRequest))
	})
	return _c
}

func (_c *TargetStrategy_QueryTransmissionState_Call) Return(_a0 *writetarget.TransmissionState, _a1 error) *TargetStrategy_QueryTransmissionState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TargetStrategy_QueryTransmissionState_Call) RunAndReturn(run func(context.Context, uint16, capabilities.CapabilityRequest) (*writetarget.TransmissionState, error)) *TargetStrategy_QueryTransmissionState_Call {
	_c.Call.Return(run)
	return _c
}

// TransmitReport provides a mock function with given fields: ctx, report, reportContext, signatures, request
func (_m *TargetStrategy) TransmitReport(ctx context.Context, report []byte, reportContext []byte, signatures [][]byte, request capabilities.CapabilityRequest) (string, error) {
	ret := _m.Called(ctx, report, reportContext, signatures, request)

	if len(ret) == 0 {
		panic("no return value specified for TransmitReport")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) (string, error)); ok {
		return rf(ctx, report, reportContext, signatures, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) string); ok {
		r0 = rf(ctx, report, reportContext, signatures, request)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) error); ok {
		r1 = rf(ctx, report, reportContext, signatures, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TargetStrategy_TransmitReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransmitReport'
type TargetStrategy_TransmitReport_Call struct {
	*mock.Call
}

// TransmitReport is a helper method to define mock.On call
//   - ctx context.Context
//   - report []byte
//   - reportContext []byte
//   - signatures [][]byte
//   - request capabilities.CapabilityRequest
func (_e *TargetStrategy_Expecter) TransmitReport(ctx interface{}, report interface{}, reportContext interface{}, signatures interface{}, request interface{}) *TargetStrategy_TransmitReport_Call {
	return &TargetStrategy_TransmitReport_Call{Call: _e.mock.On("TransmitReport", ctx, report, reportContext, signatures, request)}
}

func (_c *TargetStrategy_TransmitReport_Call) Run(run func(ctx context.Context, report []byte, reportContext []byte, signatures [][]byte, request capabilities.CapabilityRequest)) *TargetStrategy_TransmitReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].([]byte), args[3].([][]byte), args[4].(capabilities.CapabilityRequest))
	})
	return _c
}

func (_c *TargetStrategy_TransmitReport_Call) Return(_a0 string, _a1 error) *TargetStrategy_TransmitReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TargetStrategy_TransmitReport_Call) RunAndReturn(run func(context.Context, []byte, []byte, [][]byte, capabilities.CapabilityRequest) (string, error)) *TargetStrategy_TransmitReport_Call {
	_c.Call.Return(run)
	return _c
}

// NewTargetStrategy creates a new instance of TargetStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTargetStrategy(t interface {
	mock.TestingT
	Cleanup(func())
}) *TargetStrategy {
	mock := &TargetStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
