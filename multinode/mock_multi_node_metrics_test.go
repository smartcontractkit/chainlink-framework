// Code generated by mockery v2.53.0. DO NOT EDIT.

package multinode

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockMultiNodeMetrics is an autogenerated mock type for the multiNodeMetrics type
type mockMultiNodeMetrics struct {
	mock.Mock
}

type mockMultiNodeMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMultiNodeMetrics) EXPECT() *mockMultiNodeMetrics_Expecter {
	return &mockMultiNodeMetrics_Expecter{mock: &_m.Mock}
}

// RecordNodeStates provides a mock function with given fields: ctx, state, count
func (_m *mockMultiNodeMetrics) RecordNodeStates(ctx context.Context, state string, count int64) {
	_m.Called(ctx, state, count)
}

// mockMultiNodeMetrics_RecordNodeStates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordNodeStates'
type mockMultiNodeMetrics_RecordNodeStates_Call struct {
	*mock.Call
}

// RecordNodeStates is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
//   - count int64
func (_e *mockMultiNodeMetrics_Expecter) RecordNodeStates(ctx interface{}, state interface{}, count interface{}) *mockMultiNodeMetrics_RecordNodeStates_Call {
	return &mockMultiNodeMetrics_RecordNodeStates_Call{Call: _e.mock.On("RecordNodeStates", ctx, state, count)}
}

func (_c *mockMultiNodeMetrics_RecordNodeStates_Call) Run(run func(ctx context.Context, state string, count int64)) *mockMultiNodeMetrics_RecordNodeStates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *mockMultiNodeMetrics_RecordNodeStates_Call) Return() *mockMultiNodeMetrics_RecordNodeStates_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockMultiNodeMetrics_RecordNodeStates_Call) RunAndReturn(run func(context.Context, string, int64)) *mockMultiNodeMetrics_RecordNodeStates_Call {
	_c.Run(run)
	return _c
}

// newMockMultiNodeMetrics creates a new instance of mockMultiNodeMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMultiNodeMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMultiNodeMetrics {
	mock := &mockMultiNodeMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
