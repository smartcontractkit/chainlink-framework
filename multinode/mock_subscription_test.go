// Code generated by mockery v2.53.0. DO NOT EDIT.

package multinode

import mock "github.com/stretchr/testify/mock"

// mockSubscription is an autogenerated mock type for the Subscription type
type mockSubscription struct {
	mock.Mock
}

type mockSubscription_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSubscription) EXPECT() *mockSubscription_Expecter {
	return &mockSubscription_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with no fields
func (_m *mockSubscription) Err() <-chan error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// mockSubscription_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type mockSubscription_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *mockSubscription_Expecter) Err() *mockSubscription_Err_Call {
	return &mockSubscription_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *mockSubscription_Err_Call) Run(run func()) *mockSubscription_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSubscription_Err_Call) Return(_a0 <-chan error) *mockSubscription_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSubscription_Err_Call) RunAndReturn(run func() <-chan error) *mockSubscription_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with no fields
func (_m *mockSubscription) Unsubscribe() {
	_m.Called()
}

// mockSubscription_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type mockSubscription_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
func (_e *mockSubscription_Expecter) Unsubscribe() *mockSubscription_Unsubscribe_Call {
	return &mockSubscription_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe")}
}

func (_c *mockSubscription_Unsubscribe_Call) Run(run func()) *mockSubscription_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSubscription_Unsubscribe_Call) Return() *mockSubscription_Unsubscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockSubscription_Unsubscribe_Call) RunAndReturn(run func()) *mockSubscription_Unsubscribe_Call {
	_c.Run(run)
	return _c
}

// newMockSubscription creates a new instance of mockSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSubscription {
	mock := &mockSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
